@model ASI.Basecode.Services.ServiceModels.TicketViewModel

@{
    ViewData["Title"] = "Create";
}

<h1>Create Ticket</h1>

<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create" method="post" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Subject" class="control-label"></label>
                <input asp-for="Subject" class="form-control" />
                <span asp-validation-for="Subject" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="IssueDescription" class="control-label"></label>
                <textarea asp-for="IssueDescription" class="form-control"></textarea>
                <span asp-validation-for="IssueDescription" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CategoryTypeId" class="control-label"></label>
                <select asp-for="CategoryTypeId" class="form-control">
                    @foreach (var item in Model.CategoryTypes)
                    {
                        <option value="@item.CategoryTypeId">@item.CategoryName</option>
                    }
                </select>
                <span asp-validation-for="CategoryTypeId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="PriorityTypeId" class="control-label"></label>
                <select asp-for="PriorityTypeId" class="form-control">
                    @foreach (var item in Model.PriorityTypes)
                    {
                        <option value="@item.PriorityTypeId">@item.PriorityName</option>
                    }
                </select>
                <span asp-validation-for="PriorityTypeId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label for="File">Attachment</label>
                <div id="dropArea" class="border-primary border" style="padding: 20px; text-align: center; cursor: pointer;">
                    Drag & Drop files here or click to upload
                    <input type="file" name="File" class="form-control" id="fileInput" style="display: none;" />
                </div>
                <button id="removeButton" class="btn btn-danger" style="display: none; margin-top: 10px;">Remove File</button>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="ViewAll">Back to List</a>
</div>

@section Scripts {
    <script>
        const dropArea = document.getElementById('dropArea');
        const fileInput = document.getElementById('fileInput');
        const removeButton = document.getElementById('removeButton');

        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, preventDefaults, false);
            document.body.addEventListener(eventName, preventDefaults, false);
        });

        ['dragenter', 'dragover'].forEach(eventName => {
            dropArea.addEventListener(eventName, () => {
                dropArea.classList.add('highlight');
            }, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, () => {
                dropArea.classList.remove('highlight');
            }, false);
        });

        dropArea.addEventListener('drop', handleDrop, false);

        dropArea.addEventListener('click', () => {
            fileInput.click();
        });

        fileInput.addEventListener('change', (e) => {
            handleFiles(e.target.files);
        }, false);

        removeButton.addEventListener('click', (e) => {
            e.preventDefault();
            fileInput.value = '';
            dropArea.textContent = 'Drag & Drop files here or click to upload';
            removeButton.style.display = 'none';
        });

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        function handleDrop(e) {
            const dt = e.dataTransfer;
            const files = dt.files;

            handleFiles(files);
        }

        function handleFiles(files) {
            const file = files[0];
            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(file);
            fileInput.files = dataTransfer.files;

            dropArea.textContent = file.name;
            removeButton.style.display = 'block';
        }
    </script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

<style>
    .highlight {
        background-color: #f0f8ff;
        border: 2px dashed #00f;
    }
</style>