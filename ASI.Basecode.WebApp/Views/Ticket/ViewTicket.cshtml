@model ASI.Basecode.Services.ServiceModels.TicketViewModel

@{
    ViewData["Title"] = $"View Ticket";
    await Html.RenderPartialAsync("_FeedbackModal", Model);
    await Html.RenderPartialAsync("_EditTicketModal", Model);
    await Html.RenderPartialAsync("_DeleteModal");
    await Html.RenderPartialAsync("_UpdateTrackingModal", Model);
    await Html.RenderPartialAsync("_ReopenTicketModal", Model);
    await Html.RenderPartialAsync("_UpdateAssignmentModal", Model);
    await Html.RenderPartialAsync("_UpdateCategoryModal", Model);
    await Html.RenderPartialAsync("_ConfirmationModal");
}

@section styles {
    <link rel="stylesheet" href="~/css/ticket.css" />
}

<div class="d-flex justify-content-between nav-header">
    <a href="#" class="text-black m-2 back-button">
        <h2 class="font-weight-bold">
            <i class="fa-solid fa-arrow-left mx-2"></i>
        </h2>
    </a>
</div>

<div class="container-fluid p-4">
    <div class="card px-5 py-4 mb-4">
        <div class="card-body">
            <div class="card-title mb-2 d-flex justify-content-lg-between">
                <div class="d-flex align-items-center">
                    <h3 class="font-weight-bold mb-0 mr-4">
                        @Html.DisplayNameFor(model => model.TicketId): @Html.DisplayFor(model => model.TicketId)
                    </h3>
                    @await Html.PartialAsync("_UpdateButton", Model)
                </div>
                <div>
                    <span class="border mx-1 py-1 px-3 btn-radius @GetStatusCssClass(Model.StatusType.StatusName)">
                        @Html.DisplayFor(model => model.StatusType.StatusName)
                    </span>
                    <span class="border mx-1 py-1 px-3 btn-radius @GetPriorityCssClass(Model.PriorityType.PriorityName)">
                        @Html.DisplayFor(model => model.PriorityType.PriorityName)
                    </span>
                    <span class="border mx-1 py-1 px-3 btn-radius @GetCategoryCssClass(Model.CategoryType.CategoryName)">
                        @Html.DisplayFor(model => model.CategoryType.CategoryName)
                    </span>
                </div>
            </div>
            <div class="pb-4 text-muted d-flex justify-content-between">
                <div class="my-0">
                    @Html.DisplayNameFor(model => model.Team):
                    @if (Model.TicketAssignment?.Team == null)
                    {
                        @:--Unavailable--
                    }
                    else
                    {
                        @Html.DisplayFor(model => model.Team.Name)
                    }
                    <br />
                    @Html.DisplayNameFor(model => model.Agent):
                    @if (Model.TicketAssignment?.Agent == null)
                    {
                        @:--Unavailable--
                    }
                    else
                    {
                        @Html.DisplayFor(model => model.Agent.Name)
                    }
                </div>
                <div>
                    <p class="my-0">@Html.DisplayNameFor(model => model.CreatedDate): @Html.DisplayFor(model => model.CreatedDate)</p>
                    <p class="my-0">
                        @Html.DisplayNameFor(model => model.UpdatedDate):
                        @if (Model.UpdatedDate == null)
                        {
                            @:No Updates
                        }
                        else
                        {
                            @Html.DisplayFor(model => model.UpdatedDate)
                        }
                    </p>
                </div>
            </div>
            <div class="card-text">
                <h5 class="font-weight-bold">@Html.DisplayFor(model => model.Subject)</h5>
                <div class="mb-4">
                    <p>@Html.DisplayFor(model => model.IssueDescription)</p>
                </div>

                <div class="mb-4">
                    <span class="font-weight-bold">@Html.DisplayNameFor(model => model.Attachment):</span>
                    @if (Model.Attachment == null)
                    {
                        @:No Attachment
                    }
                    else
                    {
                        <a href="@Url.Action("DownloadAttachment", "Ticket", new { id = Model.TicketId })">@Model.Attachment.Name</a>
                    }
                </div>
            </div>
        </div>
    </div>

    @if (Model.Feedback != null) 
    {
        <div class="card px-5 py-4 mb-4">
            <div class="card-body">
                <h3 class="card-title font-weight-bold mb-4">Feedback</h3>
                <div class="star-rating no-interaction small">
                    @{
                        for (int i = 5; i >= 1; i--)
                        {
                            <input disabled type="radio" id="star-@i" name="FeedbackRating"
                                   value="@i" @(Model.Feedback.FeedbackRating == i ? "checked" :
                       (Model.Feedback.FeedbackRating == 0 && i == 1 ? "checked" : "")) />
                            <label for="star-@i" title="@i stars"></label>
                        }
                    }
                </div>
                <div class="text-muted">
                    @Model.Feedback.CreatedDate <br />
                    @Model.Feedback.User.Name
                </div>
                <div class="card-text mt-5">
                    @Model.Feedback.FeedbackContent
                </div>
            </div>
        </div>
    }

    <div class="card px-5 py-4 mb-4" id="comments-section">
        <div class="card-body">
            <h3 class="card-title font-weight-bold mb-4">
                Comments
                @if (Model.StatusType.StatusName != "Resolved" && Model.StatusType.StatusName != "Closed")
                {
                    <a href="#" id="new-comment-link" class="btn btn-primary btn-radius mx-2">
                        <i class="fa fa-plus"></i>
                    </a>
                }
            </h3>

            @if (Model.StatusType.StatusName != "Resolved" && Model.StatusType.StatusName != "Closed")
            {
                <div>
                    <div id="new-comment-section" class="mt-3" style="display:none; max-width:600px">
                        <textarea id="new-comment-content" class="form-control mb-2" placeholder="Add a comment..."></textarea>
                        <div class="d-flex justify-content-end">
                            <button id="cancel-comment-btn" class="btn btn-secondary me-2 mx-2">Cancel</button>
                            <button id="post-comment-btn" class="btn btn-primary">Post</button>
                        </div>
                    </div>
                </div>
            }
            @if (Model.Comments.Any())
            {
                @foreach (var comment in Model.Comments.Where(c => c.ParentId == null))
                {
                    @await Html.PartialAsync("_Comment", comment)
                }
            }
            else
            {
                <p class="alert alert-warning text-center my-2" role="alert">No comments.</p>
            }
        </div>
    </div>


    <!-- Add Activity Logs Section -->
    <div class="card px-5 py-4 mb-4" id="activity-logs-section" style="width: 100%; float: right;">
        <div class="card-body">
            <h3 class="card-title font-weight-bold mb-4">Activity Logs</h3>
            @if (Model.ActivityLogs.Any())
            {
                <ul class="list-group">
                    @foreach (var log in Model.ActivityLogs.OrderBy(l => l.ActivityDate))
                    {
                        <li class="list-group-item">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <strong>@log.ActivityDate.ToString("g")</strong> by <strong>@log.User?.Name</strong>:
                                </div>
                                <div>
                                    @log.Details
                                </div>
                            </div>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p class="alert alert-warning text-center" role="alert">No activity logs.</p>
            }
        </div>
    </div>
</div>

<div id="tempDataContainer" data-success="@TempData["SuccessMessage"]" data-error="@TempData["ErrorMessage"]"></div>

@section Scripts {
    <script>
        var editCommentUrl = '@Url.Action("EditComment", "Ticket")';
        var addCommentUrl = '@Url.Action("AddComment", "Ticket")';
        var deleteCommentUrl = '@Url.Action("DeleteComment", "Ticket")';
        var ticketId = '@Model.TicketId';
        var currentUserId = '@ViewBag.UserId';

        $('#teamId').change(function () {
            var selectedTeamMembers = $('#teamId option:selected').data('team-members');
            var agentDropdown = $('#agentId');
            var currentAgentId = $('#currentAgentId').val();
            var agentFound = false;

            agentDropdown.empty();

            if (!selectedTeamMembers || selectedTeamMembers.length === 0) {
                agentDropdown.append('<option value="no_agent">-- No agents available --</option>');
                agentDropdown.prop('disabled', true);
            } else {
                selectedTeamMembers.forEach(function (member) {
                    if (member.UserId == currentAgentId) {
                        agentFound = true;
                    }
                });

                if (agentFound) {
                    agentDropdown.append('<option value="no_agent">-- Unassign Agent --</option>');
                } else {
                    agentDropdown.append(`<option value="no_agent">-- Select Agent: ${selectedTeamMembers.length} Available --</option>`);
                }

                selectedTeamMembers.sort((a, b) => (a.UserId === currentUserId ? -1 : (b.UserId === currentUserId ? 1 : 0)));

                selectedTeamMembers.forEach(function (member) {
                    var optionText = member.UserId == currentUserId ? member.UserName + ' (me)' : member.UserName;
                    agentDropdown.append('<option value="' + member.UserId + '">' + optionText + '</option>');
                });

                agentDropdown.prop('disabled', false);
            }

            if (currentAgentId && agentFound) {
                agentDropdown.val(currentAgentId);
            } else {
                agentDropdown.val("no_agent");
            }
        });

        $('#teamId').trigger('change');
    </script>
    <script>
        const urlParams = new URLSearchParams(window.location.search);
        sessionStorage.setItem('sortBy', urlParams.get('sortBy') || '');
        sessionStorage.setItem('search', urlParams.get('search') || '');
        sessionStorage.setItem('showOption', urlParams.get('showOption') || '');
        sessionStorage.setItem('pageIndex', urlParams.get('pageIndex') || '1');
        sessionStorage.setItem('pageSize', urlParams.get('pageSize') || '5');
        sessionStorage.setItem('selectedFilters', urlParams.getAll('selectedFilters').join(',') || '');

        document.querySelector('.back-button').addEventListener('click', function(event) {
            event.preventDefault();
            const baseUrl = '@Url.Action("GetAll", "Ticket")';
            const params = new URLSearchParams();
            params.set('sortBy', sessionStorage.getItem('sortBy') || '');
            params.set('search', sessionStorage.getItem('search') || '');
            params.set('showOption', sessionStorage.getItem('showOption') || '');
            params.set('pageIndex', sessionStorage.getItem('pageIndex') || '1');
            params.set('pageSize', sessionStorage.getItem('pageSize') || '5');
            const selectedFilters = sessionStorage.getItem('selectedFilters') || '';
            if (selectedFilters) {
                selectedFilters.split(',').forEach(filter => params.append('selectedFilters', filter));
            }
            window.location.href = `${baseUrl}?${params.toString()}`;
        });
    </script>
    <script src="~/js/comment.js"></script>
    <script src="~/js/feedback.js"></script>
    <script src="~/js/toastrNotification.js"></script>
    <script src="~/js/ticket.js"></script>
    <script src="~/js/confirm.js"></script>
}
@functions {
    string GetPriorityCssClass(string PriorityName)
    {
        switch (PriorityName.ToLower())
        {
            case "critical":
                return "priority-critical";
            case "high":
                return "priority-high";
            case "medium":
                return "priority-medium";
            case "low":
                return "priority-low";
            default:
                return "";
        }
    }

    string GetStatusCssClass(string StatusName)
    {
        switch (StatusName.ToLower())
        {
            case "open":
                return "status-open";
            case "closed":
                return "status-closed";
            case "in progress":
                return "status-in-progress";
            case "resolved":
                return "status-resolved";
            default:
                return "";
        }
    }

    string GetCategoryCssClass(string CategoryName)
    {
        switch (CategoryName.ToLower())
        {
            case "software":
                return "category-software";
            case "hardware":
                return "category-hardware";
            case "network":
                return "category-network";
            case "account":
                return "category-account";
            case "other":
                return "category-other";
            default:
                return "";
        }
    }
}