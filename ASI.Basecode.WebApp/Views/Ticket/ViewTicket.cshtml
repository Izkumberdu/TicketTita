@model ASI.Basecode.Services.ServiceModels.TicketViewModel

@{
    ViewData["Title"] = "ViewTicket";
    await Html.RenderPartialAsync("_FeedbackModal", Model);
}

@section styles {
    <link rel="stylesheet" href="~/css/ticket.css" />
}

<h1 class="nav-header display-6">View Ticket</h1>

<div class="container-fluid p-4">
    <div class="card px-5 py-4 mb-4">
        <div class="card-body">
            <div class="card-title mb-2 d-flex justify-content-lg-between">
                <h3 class="font-weight-bold">
                    @Html.DisplayNameFor(model => model.TicketId): @Html.DisplayFor(model => model.TicketId)
                </h3>
                <div>
                    <span class="border mx-1 py-1 px-3 btn-radius @GetStatusCssClass(Model.StatusType.StatusName)">
                        @Html.DisplayFor(model => model.StatusType.StatusName)
                    </span>
                    <span class="border mx-1 py-1 px-3 btn-radius @GetPriorityCssClass(Model.PriorityType.PriorityName)">
                        @Html.DisplayFor(model => model.PriorityType.PriorityName)
                    </span>
                    <span class="border mx-1 py-1 px-3 btn-radius @GetCategoryCssClass(Model.CategoryType.CategoryName)">
                        @Html.DisplayFor(model => model.CategoryType.CategoryName)
                    </span>
                </div>
            </div>
            <div class="pb-4 text-muted d-flex justify-content-between">
                <div class="my-0">
                    @Html.DisplayNameFor(model => model.TicketAssignment):
                    @if (Model.TicketAssignment == null)
                    {
                        @:No Assignee
                    }
                    else
                    {
                        @Html.DisplayFor(model => model.Agent.Name)
                    }
                </div>
                <div>
                    <p class="my-0">@Html.DisplayNameFor(model => model.CreatedDate): @Html.DisplayFor(model => model.CreatedDate)</p>
                    <p class="my-0">
                        @Html.DisplayNameFor(model => model.UpdatedDate):
                        @if (Model.UpdatedDate == null)
                        {
                            @:No Updates
                        }
                        else
                        {
                            @Html.DisplayFor(model => model.UpdatedDate)
                        }
                    </p>
                </div>
            </div>
            <div class="card-text">
                <h5 class="font-weight-bold">@Html.DisplayFor(model => model.Subject)</h5>
                <div class="mb-4">
                    <p>@Html.DisplayFor(model => model.IssueDescription)</p>
                </div>

                <div class="mb-4">
                    <span class="font-weight-bold">@Html.DisplayNameFor(model => model.Attachment):</span>
                    @if (Model.Attachment == null)
                    {
                        @:No Attachment
                    }
                    else
                    {
                        <a href="@Url.Action("DownloadAttachment", "Ticket", new { id = Model.TicketId })">@Model.Attachment.Name</a>
                    }
                </div>
            </div>

            <div>
                @if (Model.StatusType.StatusName != "Resolved")
                {
                    @Html.ActionLink("Edit", "Edit", new { id = Model.TicketId })
                    <text> | </text>
                }
                <a asp-action="ViewAll">Back to List</a>
                @if (Model.Feedback == null && User.IsInRole("Employee") && Model.StatusType.StatusName == "Resolved")
                {
                    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#feedbackModal">
                        Provide Feedback
                    </button>
                }
            </div>
        </div>
    </div>

    @if (Model.Feedback != null) 
    {
        <div class="card px-5 py-4 mb-4">
            <div class="card-body">
                <h3 class="card-title font-weight-bold mb-4">Feedback</h3>
                <div class="star-rating no-interaction small">
                    @{
                        for (int i = 5; i >= 1; i--)
                        {
                            <input disabled type="radio" id="star-@i" name="FeedbackRating"
                                   value="@i" @(Model.Feedback.FeedbackRating == i ? "checked" :
                       (Model.Feedback.FeedbackRating == 0 && i == 1 ? "checked" : "")) />
                            <label for="star-@i" title="@i stars"></label>
                        }
                    }
                </div>
                <div class="text-muted">
                    @Model.Feedback.CreatedDate <br />
                    @Model.Feedback.User.Name
                </div>
                <div class="card-text mt-5">
                    @Model.Feedback.FeedbackContent
                </div>
            </div>
        </div>
    }
</div>





@section Scripts {
    <script src="~/js/feedback.js"></script>
    <script>
        $(document).ready(function() {
            var successMessage = '@TempData["SuccessMessage"]';
            var errorMessage = '@TempData["ErrorMessage"]';

            if (successMessage) {
                toastr.success(successMessage);
            } else if (errorMessage) {
                toastr.error(errorMessage);
            }
        });
    </script>
}

@functions {
    string GetPriorityCssClass(string PriorityName)
    {
        switch (PriorityName.ToLower())
        {
            case "critical":
                return "priority-critical";
            case "high":
                return "priority-high";
            case "medium":
                return "priority-medium";
            case "low":
                return "priority-low";
            default:
                return "";
        }
    }

    string GetStatusCssClass(string StatusName)
    {
        switch (StatusName.ToLower())
        {
            case "open":
                return "status-open";
            case "closed":
                return "status-closed";
            case "in progress":
                return "status-in-progress";
            case "resolved":
                return "status-resolved";
            default:
                return "";
        }
    }

    string GetCategoryCssClass(string CategoryName)
    {
        switch (CategoryName.ToLower())
        {
            case "software":
                return "category-software";
            case "hardware":
                return "category-hardware";
            case "network":
                return "category-network";
            case "account":
                return "category-account";
            case "other":
                return "category-other";
            default:
                return "";
        }
    }
}