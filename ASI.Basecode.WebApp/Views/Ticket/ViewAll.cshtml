@model ASI.Basecode.Services.ServiceModels.PaginatedList<ASI.Basecode.Services.ServiceModels.TicketViewModel>

@{
    ViewData["Title"] = "ViewAll";
    await Html.RenderPartialAsync("_DeleteModal");
    await Html.RenderPartialAsync("_CreateTicketModal", new ASI.Basecode.Services.ServiceModels.TicketViewModel());

    string filterBy = ViewData["FilterBy"] as string;
    string filterValue = ViewData["FilterValue"] as string;
    string sortBy = ViewData["SortBy"] as string;
    int pageIndex = Model.PageIndex;

    string sortById = string.IsNullOrEmpty(sortBy) ? "id_desc" : null;
    string sortBySubject = sortBy == "subject" ? "subject_desc" : "subject";
    string sortByStatus = sortBy == "status" ? "status_desc" : "status";
    string sortByPriority = sortBy == "priority" ? "priority_desc" : "priority";
    string sortByCategory = sortBy == "category" ? "category_desc" : "category";
    string sortByUser = sortBy == "user" ? "user_desc" : "user";
    string sortByCreatedDate = sortBy == "created" ? "created_desc" : "created";
    string sortByUpdatedDate = sortBy == "updated" ? "updated_desc" : "updated";
    string sortByResolvedDate = sortBy == "resolved" ? "resolved_desc" : "resolved";

    var priorityTypes = ViewBag.PriorityTypes as List<string>;
    var statusTypes = ViewBag.StatusTypes as List<string>;
    var categoryTypes = ViewBag.CategoryTypes as List<string>;
    var users = ViewBag.Users as List<string>;
}

<h1 class="nav-header display-6">Tickets</h1>

<div class="container-fluid px-4 py-3">
    <p>
        @if (User.IsInRole("Employee"))
        {
            <button type="button" class="btn btn-primary btn-radius" data-toggle="modal" data-target="#createTicketModal">
                <i class="fa fa-plus"></i>
                Create Ticket
            </button>
        }
    </p>

    <form method="get" asp-action="ViewAll">
        <label for="filterBy">Filter By: </label>
        <select asp-for="@filterBy" id="filterBy" name="filterBy">
            <option value="">No Filter</option>
            <option value="priority">Priority</option>
            <option value="status">Status</option>
            <option value="category">Category</option>
            <option value="user">User</option>
        </select>
        <select id="filterValue" name="filterValue" style="display: none;"></select>
        <button type="submit" class="btn btn-primary">Apply Filter</button>
    </form>

    <div class="py-3">
        <table class="table table-white">
            <thead>
                <tr>
                    <th>

                        <a asp-action="ViewAll" asp-route-sortBy="@sortById" asp-route-filterBy="@filterBy" asp-route-filterValue="@filterValue" asp-route-pageIndex="@pageIndex" class="text-black">
                            @Html.DisplayNameFor(model => model.First().TicketId)
                            @(string.IsNullOrEmpty(sortBy) ? Html.Raw("<i class='fa-solid fa-sort-up'></i>") : (sortBy == "id_desc" ? Html.Raw("<i class='fa-solid fa-sort-down'></i>") : Html.Raw("<i class='fa-solid fa-sort'></i>")))
                        </a>
                    </th>
                    <th>
                        <a asp-action="ViewAll" asp-route-sortBy="@sortBySubject" asp-route-filterBy="@filterBy" asp-route-filterValue="@filterValue" asp-route-pageIndex="@pageIndex" class="text-black">
                            @Html.DisplayNameFor(model => model.First().Subject)
                            @(sortBy == "subject" ? Html.Raw("<i class='fa-solid fa-sort-up'></i>") : (sortBy == "subject_desc" ? Html.Raw("<i class='fa-solid fa-sort-down'></i>") : Html.Raw("<i class='fa-solid fa-sort'></i>")))
                        </a>
                    </th>
                    @if (!User.IsInRole("Employee"))
                    {
                        <th>
                            <a asp-action="ViewAll" asp-route-sortBy="@sortByUser" asp-route-filterBy="@filterBy" asp-route-filterValue="@filterValue" asp-route-pageIndex="@pageIndex" class="text-black">
                                @Html.DisplayNameFor(model => model.First().User)
                                @(sortBy == "user" ? Html.Raw("<i class='fa-solid fa-sort-up'></i>") : (sortBy == "user_desc" ? Html.Raw("<i class='fa-solid fa-sort-down'></i>") : Html.Raw("<i class='fa-solid fa-sort'></i>")))
                            </a>
                        </th>
                    }
                    <th>
                        <a asp-action="ViewAll" asp-route-sortBy="@sortByUpdatedDate" asp-route-filterBy="@filterBy" asp-route-filterValue="@filterValue" asp-route-pageIndex="@pageIndex" class="text-black">
                            @Html.DisplayNameFor(model => model.First().UpdatedDate)
                            @(sortBy == "updated" ? Html.Raw("<i class='fa-solid fa-sort-up'></i>") : (sortBy == "updated_desc" ? Html.Raw("<i class='fa-solid fa-sort-down'></i>") : Html.Raw("<i class='fa-solid fa-sort'></i>")))
                        </a>
                    </th>
                    <th>
                        <a asp-action="ViewAll" asp-route-sortBy="@sortByResolvedDate" asp-route-filterBy="@filterBy" asp-route-filterValue="@filterValue" asp-route-pageIndex="@pageIndex" class="text-black">
                            @Html.DisplayNameFor(model => model.First().ResolvedDate)
                            @(sortBy == "resolved" ? Html.Raw("<i class='fa-solid fa-sort-up'></i>") : (sortBy == "resolved_desc" ? Html.Raw("<i class='fa-solid fa-sort-down'></i>") : Html.Raw("<i class='fa-solid fa-sort'></i>")))
                        </a>
                    </th>
                    <th>
                        <a asp-action="ViewAll" asp-route-sortBy="@sortByCategory" asp-route-filterBy="@filterBy" asp-route-filterValue="@filterValue" asp-route-pageIndex="@pageIndex" class="text-black">
                            @Html.DisplayNameFor(model => model.First().CategoryType)
                            @(sortBy == "category" ? Html.Raw("<i class='fa-solid fa-sort-up'></i>") : (sortBy == "category_desc" ? Html.Raw("<i class='fa-solid fa-sort-down'></i>") : Html.Raw("<i class='fa-solid fa-sort'></i>")))
                        </a>
                    </th>
                    <th>
                        <a asp-action="ViewAll" asp-route-sortBy="@sortByPriority" asp-route-filterBy="@filterBy" asp-route-filterValue="@filterValue" asp-route-pageIndex="@pageIndex" class="text-black">
                            @Html.DisplayNameFor(model => model.First().PriorityType)
                            @(sortBy == "priority" ? Html.Raw("<i class='fa-solid fa-sort-up'></i>") : (sortBy == "priority_desc" ? Html.Raw("<i class='fa-solid fa-sort-down'></i>") : Html.Raw("<i class='fa-solid fa-sort'></i>")))
                        </a>
                    </th>
                    <th>
                        <a asp-action="ViewAll" asp-route-sortBy="@sortByStatus" asp-route-filterBy="@filterBy" asp-route-filterValue="@filterValue" asp-route-pageIndex="@pageIndex" class="text-black">
                            @Html.DisplayNameFor(model => model.First().StatusType)
                            @(sortBy == "status" ? Html.Raw("<i class='fa-solid fa-sort-up'></i>") : (sortBy == "status_desc" ? Html.Raw("<i class='fa-solid fa-sort-down'></i>") : Html.Raw("<i class='fa-solid fa-sort'></i>")))
                        </a>
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.First().Attachment)
                    </th>
                    <th></th>
                </tr>
            </thead>

            <tbody>
                @if (!Model.Any())
                {
                    <tr>
                        <td colspan="13" class="alert alert-warning text-center" role="alert">
                            @(string.IsNullOrEmpty(filterBy) ? Html.Raw("No tickets found") : Html.Raw("No tickets found matching the criteria"))
                        </td>
                    </tr>
                }
                else
                {
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => item.TicketId)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Subject)
                            </td>
                            @if (!User.IsInRole("Employee"))
                            {
                                <td>
                                    @Html.DisplayFor(modelItem => item.User.Name)
                                </td>
                            }
                            <td>
                                @if (item.UpdatedDate == null)
                                {
                                    @:No Updates
                                }
                                else
                                {
                                    @Html.DisplayFor(modelItem => item.UpdatedDate)
                                }
                            </td>
                            <td>
                                @if (item.ResolvedDate == null)
                                {
                                    @:Open
                                }
                                else
                                {
                                    @Html.DisplayFor(modelItem => item.ResolvedDate)
                                }
                            </td>
                            <td>
                                <span class="border mx-1 py-1 px-3 btn-radius @GetCategoryCssClass(item.CategoryType.CategoryName)">
                                    @Html.DisplayFor(modelItem => item.CategoryType.CategoryName)
                                </span>
                            </td>
                            <td>
                                <span class="border mx-1 py-1 px-3 btn-radius @GetPriorityCssClass(item.PriorityType.PriorityName)">
                                    @Html.DisplayFor(modelItem => item.PriorityType.PriorityName)
                                </span>
                            </td>
                            <td>
                                <span class="border mx-1 py-1 px-3 btn-radius @GetStatusCssClass(item.StatusType.StatusName)">
                                    @Html.DisplayFor(modelItem => item.StatusType.StatusName)
                                </span>
                            </td>
                            <td>
                                @if (item.Attachment != null)
                                {
                                    <a href="@Url.Action("DownloadAttachment", "Ticket", new { id = item.TicketId })">Download Attachment</a>
                                }
                                else
                                {
                                    @:No attachment
                                }
                            </td>
                            <td>
                                @Html.ActionLink(" ", "ViewTicket", new { id = item.TicketId }, new { @class = "fas fa-info-circle action-icon", title = "Details" })
                                @if (User.IsInRole("Employee"))
                                {
                                    @if (item.StatusType.StatusName.Contains("Resolved"))
                                    {
                                        <text> | </text>
                                        @if (item.Feedback == null)
                                        {
                                            @Html.ActionLink(" ", "ViewTicket", new { id = item.TicketId, showModal = "provideFeedback" }, new { @class = "fas fa-comment-dots action-icon", title = "Provide Feedback" })
                                        }
                                        else
                                        {
                                            @Html.ActionLink(" ", "ViewTicket", new { id = item.TicketId }, new { @class = "fas fa-comment-dots action-icon", title = "View Feedback" })
                                        }
                                    }
                                    else
                                    {
                                        <text> | </text>
                                        @Html.ActionLink(" ", "ViewTicket", new { id = item.TicketId, showModal = "editTicket" }, new { @class = "fas fa-edit action-icon", title = "Edit" })
                                    }
                                    <text> | </text>
                                    <a href="javascript:void(0);" onclick="displayDeleteModal('@item.TicketId', '@(item.Subject.Length > 20 ? item.Subject.Substring(0, 20) + "..." : item.Subject)')">
                                        <i class="fas fa-trash action-icon" title="Delete"></i>
                                    </a>
                                }
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
        <nav>
            <ul class="pagination">
                @if (Model.HasPreviousPage)
                {
                    <li class="page-item">
                        <a class="page-link" asp-action="ViewAll" asp-route-pageIndex="@(Model.PageIndex - 1)" asp-route-sortBy="@sortBy" asp-route-filterBy="@filterBy" asp-route-filterValue="@filterValue">Previous</a>
                    </li>
                }
                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                        <a class="page-link" asp-action="ViewAll" asp-route-pageIndex="@i" asp-route-sortBy="@sortBy" asp-route-filterBy="@filterBy" asp-route-filterValue="@filterValue">@i</a>
                    </li>
                }
                @if (Model.HasNextPage)
                {
                    <li class="page-item">
                        <a class="page-link" asp-action="ViewAll" asp-route-pageIndex="@(Model.PageIndex + 1)" asp-route-sortBy="@sortBy" asp-route-filterBy="@filterBy" asp-route-filterValue="@filterValue">Next</a>
                    </li>
                }
            </ul>
        </nav>
    </div>
</div>


@*---- Values passed to the js files ----*@
<div id="tempDataContainer" data-success="@TempData["SuccessMessage"]" data-error="@TempData["ErrorMessage"]"></div>
<input type="hidden" id="baseUrl" value="@Url.Action("ViewAll", "Ticket")" />
<input type="hidden" id="deleteUrl" value="@Url.Action("Delete", "Ticket")" />
<input type="hidden" id="filterValueHidden" value="@filterValue" />
<input type="hidden" id="priorityOptions" value='@Html.Raw(Json.Serialize(priorityTypes))' />
<input type="hidden" id="statusOptions" value='@Html.Raw(Json.Serialize(statusTypes))' />
<input type="hidden" id="categoryOptions" value='@Html.Raw(Json.Serialize(categoryTypes))' />
<input type="hidden" id="userOptions" value='@Html.Raw(Json.Serialize(users))' />

@section Scripts {
    <script src="~/js/filterAndSort.js"></script>
    <script src="~/js/delete.js"></script>
    <script src="~/js/feedback.js"></script>
    <script src="~/js/toastrNotification.js"></script>
    <script src="~/js/ticket.js"></script>
}

@functions {
    string GetPriorityCssClass(string PriorityName)
    {
        switch (PriorityName.ToLower())
        {
            case "critical":
                return "priority-critical";
            case "high":
                return "priority-high";
            case "medium":
                return "priority-medium";
            case "low":
                return "priority-low";
            default:
                return "";
        }
    }

    string GetStatusCssClass(string StatusName)
    {
        switch (StatusName.ToLower())
        {
            case "open":
                return "status-open";
            case "closed":
                return "status-closed";
            case "in progress":
                return "status-in-progress";
            case "resolved":
                return "status-resolved";
            default:
                return "";
        }
    }

    string GetCategoryCssClass(string CategoryName)
    {
        switch (CategoryName.ToLower())
        {
            case "software":
                return "category-software";
            case "hardware":
                return "category-hardware";
            case "network":
                return "category-network";
            case "account":
                return "category-account";
            case "other":
                return "category-other";
            default:
                return "";
        }
    }
}