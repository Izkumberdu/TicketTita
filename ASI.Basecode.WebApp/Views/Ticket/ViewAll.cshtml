@model IEnumerable<ASI.Basecode.Services.ServiceModels.TicketViewModel>

@{
    ViewData["Title"] = "ViewAll";
    string filterBy = ViewData["FilterBy"] as string;
    string filterValue = ViewData["FilterValue"] as string;
    string sortBy = ViewData["SortBy"] as string;

    string sortById = string.IsNullOrEmpty(sortBy) ? "id_desc" : null;
    string sortBySubject = sortBy == "subject" ? "subject_desc" : "subject";
    string sortByStatus = sortBy == "status" ? "status_desc" : "status";
    string sortByPriority = sortBy == "priority" ? "priority_desc" : "priority";
    string sortByCategory = sortBy == "category" ? "category_desc" : "category";
    string sortByUser = sortBy == "user" ? "user_desc" : "user";
    string sortByCreatedDate = sortBy == "created" ? "created_desc" : "created";
    string sortByUpdatedDate = sortBy == "updated" ? "updated_desc" : "updated";
    string sortByResolvedDate = sortBy == "resolved" ? "resolved_desc" : "resolved";

    var priorityTypes = ViewBag.PriorityTypes as List<string>;
    var statusTypes = ViewBag.StatusTypes as List<string>;
    var categoryTypes = ViewBag.CategoryTypes as List<string>;
    var users = ViewBag.Users as List<string>;
}

<h1>View All</h1>

<p>
    @if (User.IsInRole("Employee"))
    {
        <a asp-action="Create">Create New</a>
        <text> | </text>
    }
    <a asp-action="UpdateStatus">Update Status</a>
    @if (User.IsInRole("Admin") || User.IsInRole("Support Agent"))
    {
        <text> | </text>
        <a asp-action="UpdatePriority">Update Priority</a>
        @if (User.IsInRole("Admin"))
        {
            <text> | </text>
            <a asp-action="AssignTicket">Assign</a>
            <text> | </text>
            <a asp-action="ReassignTicket">Reassign</a>
        }
    }
</p>

<form method="get" asp-action="ViewAll">
    <label for="filterBy">Filter By: </label>
    <select asp-for="@filterBy" id="filterBy" name="filterBy">
        <option value="" >No Filter</option>
        <option value="priority">Priority</option>
        <option value="status">Status</option>
        <option value="category">Category</option>
        <option value="user">User</option>
    </select>
    <select id="filterValue" name="filterValue" style="display: none;"></select>
    <button type="submit">Apply Filter</button>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                
                <a asp-action="ViewAll" asp-route-sortBy="@sortById" asp-route-filterBy="@filterBy" asp-route-filterValue="@filterValue" class="text-black">
                    @Html.DisplayNameFor(model => model.TicketId)
                    @(string.IsNullOrEmpty(sortBy) ? Html.Raw("<i class='fa-solid fa-sort-up'></i>") : (sortBy == "id_desc" ? Html.Raw("<i class='fa-solid fa-sort-down'></i>") : Html.Raw("<i class='fa-solid fa-sort'></i>")))
                </a>
            </th>
            <th>
                <a asp-action="ViewAll" asp-route-sortBy="@sortBySubject" asp-route-filterBy="@filterBy" asp-route-filterValue="@filterValue" class="text-black">
                    @Html.DisplayNameFor(model => model.Subject)
                    @(sortBy == "subject" ? Html.Raw("<i class='fa-solid fa-sort-up'></i>") : (sortBy == "subject_desc" ? Html.Raw("<i class='fa-solid fa-sort-down'></i>") : Html.Raw("<i class='fa-solid fa-sort'></i>")))
                </a>
            </th>
            <th>
                @Html.DisplayNameFor(model => model.IssueDescription)
            </th>
            @if (!User.IsInRole("Employee"))
            {
                <th>
                    <a asp-action="ViewAll" asp-route-sortBy="@sortByUser" asp-route-filterBy="@filterBy" asp-route-filterValue="@filterValue" class="text-black">
                        @Html.DisplayNameFor(model => model.User)
                        @(sortBy == "user" ? Html.Raw("<i class='fa-solid fa-sort-up'></i>") : (sortBy == "user_desc" ? Html.Raw("<i class='fa-solid fa-sort-down'></i>") : Html.Raw("<i class='fa-solid fa-sort'></i>")))
                    </a>
                </th>
            }
            <th>
                <a asp-action="ViewAll" asp-route-sortBy="@sortByCreatedDate" asp-route-filterBy="@filterBy" asp-route-filterValue="@filterValue" class="text-black">
                    @Html.DisplayNameFor(model => model.CreatedDate)
                    @(sortBy == "created" ? Html.Raw("<i class='fa-solid fa-sort-up'></i>") : (sortBy == "created_desc" ? Html.Raw("<i class='fa-solid fa-sort-down'></i>") : Html.Raw("<i class='fa-solid fa-sort'></i>")))
                </a>
            </th>
            <th>
                <a asp-action="ViewAll" asp-route-sortBy="@sortByUpdatedDate" asp-route-filterBy="@filterBy" asp-route-filterValue="@filterValue" class="text-black">
                    @Html.DisplayNameFor(model => model.UpdatedDate)
                    @(sortBy == "updated" ? Html.Raw("<i class='fa-solid fa-sort-up'></i>") : (sortBy == "updated_desc" ? Html.Raw("<i class='fa-solid fa-sort-down'></i>") : Html.Raw("<i class='fa-solid fa-sort'></i>")))
                </a>
            </th>
            <th>
                <a asp-action="ViewAll" asp-route-sortBy="@sortByResolvedDate" asp-route-filterBy="@filterBy" asp-route-filterValue="@filterValue" class="text-black">
                    @Html.DisplayNameFor(model => model.ResolvedDate)
                    @(sortBy == "resolved" ? Html.Raw("<i class='fa-solid fa-sort-up'></i>") : (sortBy == "resolved_desc" ? Html.Raw("<i class='fa-solid fa-sort-down'></i>") : Html.Raw("<i class='fa-solid fa-sort'></i>")))
                </a>
            </th>
            <th>
                <a asp-action="ViewAll" asp-route-sortBy="@sortByCategory" asp-route-filterBy="@filterBy" asp-route-filterValue="@filterValue" class="text-black">
                    @Html.DisplayNameFor(model => model.CategoryType)
                    @(sortBy == "category" ? Html.Raw("<i class='fa-solid fa-sort-up'></i>") : (sortBy == "category_desc" ? Html.Raw("<i class='fa-solid fa-sort-down'></i>") : Html.Raw("<i class='fa-solid fa-sort'></i>")))
                </a>
            </th>
            <th>
                <a asp-action="ViewAll" asp-route-sortBy="@sortByPriority" asp-route-filterBy="@filterBy" asp-route-filterValue="@filterValue" class="text-black">
                    @Html.DisplayNameFor(model => model.PriorityType)
                    @(sortBy == "priority" ? Html.Raw("<i class='fa-solid fa-sort-up'></i>") : (sortBy == "priority_desc" ? Html.Raw("<i class='fa-solid fa-sort-down'></i>") : Html.Raw("<i class='fa-solid fa-sort'></i>")))
                </a>
            </th>
            <th>
                <a asp-action="ViewAll" asp-route-sortBy="@sortByStatus" asp-route-filterBy="@filterBy" asp-route-filterValue="@filterValue" class="text-black">
                    @Html.DisplayNameFor(model => model.StatusType)
                    @(sortBy == "status" ? Html.Raw("<i class='fa-solid fa-sort-up'></i>") : (sortBy == "status_desc" ? Html.Raw("<i class='fa-solid fa-sort-down'></i>") : Html.Raw("<i class='fa-solid fa-sort'></i>")))
                </a>
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Attachment)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.TicketId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Subject)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.IssueDescription)
                </td>
                @if (!User.IsInRole("Employee"))
                {
                    <td>
                        @Html.DisplayFor(modelItem => item.User.Name)
                    </td>
                }
                <td>
                    @Html.DisplayFor(modelItem => item.CreatedDate)
                </td>
                <td>
                    @if (item.UpdatedDate == null)
                    {
                        @:No Updates
                    }
                    else
                    {
                        @Html.DisplayFor(modelItem => item.UpdatedDate)
                    }
                </td>
                <td>
                    @if (item.ResolvedDate == null)
                    {
                        @:Open
                    }
                    else
                    {
                        @Html.DisplayFor(modelItem => item.ResolvedDate)
                    }
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CategoryType.CategoryName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PriorityType.PriorityName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.StatusType.StatusName)
                </td>
                <td>
                    @if (item.Attachment != null)
                    {
                        <a href="@Url.Action("DownloadAttachment", "Ticket", new { id = item.TicketId })">Download Attachment</a>
                    }
                    else
                    {
                        @:No attachment
                    }
                </td>
                <td>
                    @Html.ActionLink("Details", "ViewTicket", new { id = item.TicketId })
                    @if (User.IsInRole("Employee"))
                    {
                        @if (item.StatusType.StatusName.Contains("Resolved"))
                        {
                            <text> | </text>
                            @if (item.Feedback == null)
                            {
                                @Html.ActionLink("Provide Feedback", "ProvideFeedback", "Feedback", new { id = item.TicketId }, null)
                            }
                            else
                            {
                                @Html.ActionLink("View Feedback", "ViewFeedback", "Feedback", new { id = item.TicketId }, null)
                            }
                        }
                        else
                        {
                            <text> | </text>
                            @Html.ActionLink("Edit", "Edit", new { id = item.TicketId })
                        }
                        <text> | </text>
                        <a href="javascript:void(0);" onclick="displayDeleteModal('@item.TicketId')">Delete</a>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="modal fade" id="deleteModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this item?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        var itemId;
        function displayDeleteModal(id) {
            itemId = id;
            $('#deleteModal').modal('show');
        }
        $('#confirmDeleteBtn').on('click', function () {
            $.ajax({
                url: '@Url.Action("Delete", "Ticket")',
                type: 'POST',
                data: { id: itemId },
                success: function (result) {
                    if (result.success) {
                        sessionStorage.setItem("DeleteStatus", "Deleted Successfully");
                        window.location.href = '@Url.Action("ViewAll", "Ticket")';
                    } else {
                        sessionStorage.setItem("DeleteStatus", "Delete Failed");
                        window.location.href = '@Url.Action("ViewAll", "Ticket")';
                    }
                }
            });
        });

        var createMessage = '@TempData["CreateMessage"]';
        var deleteMessage = sessionStorage.getItem("DeleteStatus");

        if (createMessage) {
            toastr.success(createMessage);
        } else if (deleteMessage) {
            if (deleteMessage.includes("Success")) {
                toastr.success(deleteMessage);
            } else {
                toastr.error(deleteMessage);
            }
            sessionStorage.removeItem("DeleteStatus");
        }
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const filterBySelect = document.getElementById("filterBy");
            const filterValueSelect = document.getElementById("filterValue");

            const priorityOptions = @Html.Raw(Json.Serialize(priorityTypes));
            const statusOptions = @Html.Raw(Json.Serialize(statusTypes));
            const categoryOptions = @Html.Raw(Json.Serialize(categoryTypes));
            const userOptions = @Html.Raw(Json.Serialize(users));

            function populateOptions(options) {
                filterValueSelect.innerHTML = "";
                options.forEach(option => {
                    const opt = document.createElement("option");
                    opt.value = option;
                    opt.text = option;
                    if (option === '@filterValue') {
                        opt.selected = true;
                    }
                    filterValueSelect.add(opt);
                });
            }

            function updateFilterValues() {
                const filterBy = filterBySelect.value;
                if (filterBy === "") {
                    filterValueSelect.style.display = "none";
                } else {
                    filterValueSelect.style.display = "inline-block";
                    switch (filterBy) {
                        case "priority":
                            populateOptions(priorityOptions);
                            break;
                        case "status":
                            populateOptions(statusOptions);
                            break;
                        case "category":
                            populateOptions(categoryOptions);
                            break;
                        case "user":
                            populateOptions(userOptions);
                            break;
                        default:
                            filterValueSelect.innerHTML = "";
                            break;
                    }
                }
            }

            filterBySelect.addEventListener("change", updateFilterValues);

            updateFilterValues();
        });
    </script>
}
