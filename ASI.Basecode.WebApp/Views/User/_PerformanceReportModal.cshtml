@model ASI.Basecode.Services.ServiceModels.PerformanceReportViewModel

@functions {
    string ConvertResolutionTime(double averageResolutionTime)
    {
        if (averageResolutionTime >= 1440) // 1440 minutes in a day
        {
            double days = averageResolutionTime / 1440;
            return $"{days:0.0} days";
        }
        else if (averageResolutionTime >= 60) // 60 minutes in an hour
        {
            double hours = averageResolutionTime / 60;
            return $"{hours:0.0} hours";
        }
        else
        {
            return $"{averageResolutionTime:0.0} minutes";
        }
    }

    string TruncateFeedback(string feedbackContent, int maxLength = 85)
    {
        if (feedbackContent.Length > maxLength)
        {
            return feedbackContent.Substring(0, maxLength) + "...";
        }
        return feedbackContent;
    }
}

@if (Model != null)
{
    <div class="performance-report">
        <div class="header">@Model.Name</div>
        <div class="summary">
            <p><strong>Tickets Resolved:</strong> @Model.ResolvedTickets</p>
            <p><strong>Average Resolution Time:</strong> @ConvertResolutionTime(Model.AverageResolutionTime)</p>
            <div class="average-rating">
                <p><strong>Average Rating:</strong> @Model.AverageRating.ToString("0.0")</p>
                <div class="star-rating">
                    @for (int i = 1; i <= 5; i++)
                    {
                        <span class="star @(i <= Math.Round(Model.AverageRating) ? "filled" : "")">&#9733;</span>
                    }
                </div>
            </div>
        </div>
        <table class="table table-striped feedback-table">
            <thead>
                <tr>
                    <th>User</th>
                    <th>Rating</th>
                    <th>Feedback</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.Feedbacks != null && Model.Feedbacks.Any())
                {
                    @foreach (var feedback in Model.Feedbacks)
                    {
                        <tr>
                            <td>@feedback.User.Name</td>
                            <td>
                                <div class="star-rating">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        <span class="star @(i <= feedback.FeedbackRating ? "filled" : "")">&#9733;</span>
                                    }
                                </div>
                            </td>
                            <td>
                                <span class="feedback-content">@TruncateFeedback(feedback.FeedbackContent)</span>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="3" class="text-center">No feedbacks yet</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <p>No performance report available.</p>
}
