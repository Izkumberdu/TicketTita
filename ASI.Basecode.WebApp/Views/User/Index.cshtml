@model IEnumerable<ASI.Basecode.Services.ServiceModels.UserViewModel>

@{
    ViewData["Title"] = "Index";
    string currentFilter = ViewData["CurrentFilter"] as string;
    string sortOrder = ViewData["CurrentSort"] as string;
    string nameSortParm = String.IsNullOrEmpty(sortOrder) ? "name_desc" : "";
    string emailSortParm = sortOrder == "Email" ? "email_desc" : "Email";
    string createdBySortParm = sortOrder == "CreatedBy" ? "createdBy_desc" : "CreatedBy";
    string createdTimeSortParm = sortOrder == "CreatedTime" ? "createdTime_desc" : "CreatedTime";
    string updatedBySortParm = sortOrder == "UpdatedBy" ? "updatedBy_desc" : "UpdatedBy";
    string roleSortParm = sortOrder == "Role" ? "role_desc" : "Role";
    string updatedTimeSortParm = sortOrder == "UpdatedTime" ? "updatedTime_desc" : "UpdatedTime";
}

<h1>Index</h1>

<form method="get" asp-action="Index">
    <div class="form-group">
        <input type="text" name="searchString" class="form-control" placeholder="Search by name or email" value="@currentFilter" />
        <button type="submit" class="btn btn-primary">Search</button>
        <a asp-action="Index" class="btn btn-secondary">Clear Filters</a>
    </div>
</form>


<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.UserId)
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@nameSortParm" asp-route-currentFilter="@currentFilter">
                    @Html.DisplayNameFor(model => model.Name)
                </a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@emailSortParm" asp-route-currentFilter="@currentFilter">
                    @Html.DisplayNameFor(model => model.Email)
                </a>
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Password)
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@roleSortParm" asp-route-currentFilter="@currentFilter">
                    @Html.DisplayNameFor(model => model.RoleId)
                </a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@createdBySortParm" asp-route-currentFilter="@currentFilter">
                    @Html.DisplayNameFor(model => model.CreatedByName)
                </a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@createdTimeSortParm" asp-route-currentFilter="@currentFilter">
                    @Html.DisplayNameFor(model => model.CreatedTime)
                </a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@updatedBySortParm" asp-route-currentFilter="@currentFilter">
                    @Html.DisplayNameFor(model => model.UpdatedByName)
                </a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@updatedTimeSortParm" asp-route-currentFilter="@currentFilter">
                    @Html.DisplayNameFor(model => model.UpdatedTime)
                </a>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.UserId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Email)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Password)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.RoleId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CreatedByName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CreatedTime)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.UpdatedByName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.UpdatedTime)
                </td>
                <td>
                    @Html.ActionLink("Edit", "Update", new { SelectedUserId = item.UserId }) |
                    @Html.ActionLink("Details", "Details", new { SelectedUserId = item.UserId }) |
                    <a href="javascript:void(0);" onclick="displayDeleteModal('@item.UserId')">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="modal fade" id="deleteModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this item?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        var itemId;
        function displayDeleteModal(id) {
            itemId = id;
            $('#deleteModal').modal('show');
        }
        $('#confirmDeleteBtn').on('click', function () {
            $.ajax({
                url: '@Url.Action("PostDelete", "User")',
                type: 'POST',
                data: { id: itemId },
                success: function (result) {
                    sessionStorage.setItem("DeleteSuccess", "Deleted Successfully");
                    window.location.href = '@Url.Action("Index", "User")';
                }
            });
        });

        var createMessage = '@TempData["CreateMessage"]';
        var deleteMessage = sessionStorage.getItem("DeleteSuccess");

        if (createMessage) {
            toastr.success(createMessage);
        } else if (deleteMessage) {
            toastr.success(deleteMessage);
            sessionStorage.removeItem("DeleteSuccess");
        }
    </script>
}
