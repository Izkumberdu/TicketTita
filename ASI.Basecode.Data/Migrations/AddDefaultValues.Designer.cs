// <auto-generated />
using System;
using ASI.Basecode.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ASI.Basecode.Data.Migrations
{
    [DbContext(typeof(AsiBasecodeDbContext))]
    [Migration("20240702041930_AddDefaultValues")]
    partial class AddDefaultValues
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ASI.Basecode.Data.Models.ActivityLog", b =>
                {
                    b.Property<string>("ActivityId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("activity_ID");

                    b.Property<DateTime>("ActivityDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("activityDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("activityType");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("details");

                    b.Property<string>("TicketId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("ticket_ID");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("user_ID");

                    b.HasKey("ActivityId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityLog", (string)null);
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.Admin", b =>
                {
                    b.Property<string>("AdminId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("admin_ID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<bool>("IsSuper")
                        .HasColumnType("bit")
                        .HasColumnName("isSuper");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("password");

                    b.HasKey("AdminId");

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.ArticleCategory", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("category_ID");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("categoryName");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.HasKey("CategoryId");

                    b.ToTable("ArticleCategory", (string)null);
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.Attachment", b =>
                {
                    b.Property<string>("AttachmentId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("attachment_ID");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("content");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("name");

                    b.Property<string>("TicketId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("ticket_ID");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("type");

                    b.Property<DateTime>("UploadedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("uploadedDate")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("AttachmentId");

                    b.HasIndex("TicketId");

                    b.ToTable("Attachment", (string)null);
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.CategoryType", b =>
                {
                    b.Property<string>("CategoryTypeId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("categoryType_ID");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("categoryName");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.HasKey("CategoryTypeId");

                    b.ToTable("CategoryType", (string)null);
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.Feedback", b =>
                {
                    b.Property<string>("FeedbackId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("feedback_ID");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FeedbackContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("feedbackContent");

                    b.Property<string>("TicketId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("ticket_ID");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("user_ID");

                    b.HasKey("FeedbackId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.KnowledgeBaseArticle", b =>
                {
                    b.Property<string>("ArticleId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("article_ID");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("author_ID");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("category_ID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedDate");

                    b.HasKey("ArticleId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("KnowledgeBaseArticle", (string)null);
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.Notification", b =>
                {
                    b.Property<string>("NotificationId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("notification_ID");

                    b.Property<DateTime>("NotificationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("notificationDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("NotificationTypeId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("notificationType_ID");

                    b.Property<string>("TicketId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("ticket_ID");

                    b.HasKey("NotificationId");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("TicketId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.NotificationType", b =>
                {
                    b.Property<string>("NotificationTypeId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("notificationType_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.HasKey("NotificationTypeId");

                    b.ToTable("NotificationType", (string)null);
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.PerformanceReport", b =>
                {
                    b.Property<string>("ReportId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("report_ID");

                    b.Property<DateTime>("AssignedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("assignedDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double>("AverageResolutionTime")
                        .HasColumnType("float")
                        .HasColumnName("averageResolutionTime");

                    b.Property<int>("ResolvedTickets")
                        .HasColumnType("int")
                        .HasColumnName("resolvedTickets");

                    b.HasKey("ReportId");

                    b.ToTable("PerformanceReport", (string)null);
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.PriorityType", b =>
                {
                    b.Property<string>("PriorityTypeId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("priorityType_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("PriorityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("priorityName");

                    b.HasKey("PriorityTypeId");

                    b.ToTable("PriorityType", (string)null);
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.Role", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("role_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("roleName");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.StatusType", b =>
                {
                    b.Property<string>("StatusTypeId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("statusType_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("statusName");

                    b.HasKey("StatusTypeId");

                    b.ToTable("StatusType", (string)null);
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.Team", b =>
                {
                    b.Property<string>("TeamId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("team_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("TeamId");

                    b.ToTable("Team", (string)null);
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.TeamMember", b =>
                {
                    b.Property<string>("TeamId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("team_ID");

                    b.Property<string>("UserId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("user_ID");

                    b.Property<string>("ReportId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("report_ID");

                    b.HasKey("TeamId", "UserId");

                    b.HasIndex("ReportId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMember", (string)null);
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.Ticket", b =>
                {
                    b.Property<string>("TicketId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("ticket_ID");

                    b.Property<string>("CategoryTypeId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("categoryType_ID");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("IssueDescription")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)")
                        .HasColumnName("issueDescription");

                    b.Property<string>("PriorityTypeId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("priorityType_ID");

                    b.Property<DateTime?>("ResolvedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("resolvedDate");

                    b.Property<string>("StatusTypeId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("statusType_ID");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("subject");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedDate");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("user_ID");

                    b.HasKey("TicketId");

                    b.HasIndex("CategoryTypeId");

                    b.HasIndex("PriorityTypeId");

                    b.HasIndex("StatusTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.TicketAssignment", b =>
                {
                    b.Property<string>("AssignmentId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("assignment_ID");

                    b.Property<string>("AdminId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("admin_ID");

                    b.Property<DateTime>("AssignedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("assignedDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TeamId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("team_ID");

                    b.Property<string>("TicketId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("ticket_ID");

                    b.HasKey("AssignmentId");

                    b.HasIndex("AdminId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketAssignment", (string)null);
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("user_ID");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("createdBy");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdTime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("password");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("role_ID");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("updatedBy");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedTime");

                    b.HasKey("UserId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.ActivityLog", b =>
                {
                    b.HasOne("ASI.Basecode.Data.Models.Ticket", "Ticket")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("TicketId")
                        .IsRequired()
                        .HasConstraintName("FK_ActivityLog_Ticket");

                    b.HasOne("ASI.Basecode.Data.Models.User", "User")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_ActivityLog_User");

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.Attachment", b =>
                {
                    b.HasOne("ASI.Basecode.Data.Models.Ticket", "Ticket")
                        .WithMany("Attachments")
                        .HasForeignKey("TicketId")
                        .IsRequired()
                        .HasConstraintName("FK_Attachment_Ticket");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.Feedback", b =>
                {
                    b.HasOne("ASI.Basecode.Data.Models.Ticket", "Ticket")
                        .WithMany("Feedbacks")
                        .HasForeignKey("TicketId")
                        .IsRequired()
                        .HasConstraintName("FK_Feedback_Ticket");

                    b.HasOne("ASI.Basecode.Data.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Feedback_User");

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.KnowledgeBaseArticle", b =>
                {
                    b.HasOne("ASI.Basecode.Data.Models.User", "Author")
                        .WithMany("KnowledgeBaseArticles")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK_KnowledgeBaseArticle_User");

                    b.HasOne("ASI.Basecode.Data.Models.ArticleCategory", "Category")
                        .WithMany("KnowledgeBaseArticles")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_KnowledgeBaseArticle_ArticleCategory");

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.Notification", b =>
                {
                    b.HasOne("ASI.Basecode.Data.Models.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Notification_NotificationType");

                    b.HasOne("ASI.Basecode.Data.Models.Ticket", "Ticket")
                        .WithMany("Notifications")
                        .HasForeignKey("TicketId")
                        .IsRequired()
                        .HasConstraintName("FK_Notification_Ticket");

                    b.Navigation("NotificationType");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.TeamMember", b =>
                {
                    b.HasOne("ASI.Basecode.Data.Models.PerformanceReport", "Report")
                        .WithMany("TeamMembers")
                        .HasForeignKey("ReportId")
                        .HasConstraintName("FK_TeamMember_PerformanceReport");

                    b.HasOne("ASI.Basecode.Data.Models.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .IsRequired()
                        .HasConstraintName("FK_TeamMember_Team");

                    b.HasOne("ASI.Basecode.Data.Models.User", "User")
                        .WithMany("TeamMembers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_TeamMember_User");

                    b.Navigation("Report");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.Ticket", b =>
                {
                    b.HasOne("ASI.Basecode.Data.Models.CategoryType", "CategoryType")
                        .WithMany("Tickets")
                        .HasForeignKey("CategoryTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Ticket_CategoryType");

                    b.HasOne("ASI.Basecode.Data.Models.PriorityType", "PriorityType")
                        .WithMany("Tickets")
                        .HasForeignKey("PriorityTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Ticket_PriorityType");

                    b.HasOne("ASI.Basecode.Data.Models.StatusType", "StatusType")
                        .WithMany("Tickets")
                        .HasForeignKey("StatusTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Ticket_StatusType");

                    b.HasOne("ASI.Basecode.Data.Models.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Ticket_User");

                    b.Navigation("CategoryType");

                    b.Navigation("PriorityType");

                    b.Navigation("StatusType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.TicketAssignment", b =>
                {
                    b.HasOne("ASI.Basecode.Data.Models.Admin", "Admin")
                        .WithMany("TicketAssignments")
                        .HasForeignKey("AdminId")
                        .IsRequired()
                        .HasConstraintName("FK_TicketAssignment_Admin");

                    b.HasOne("ASI.Basecode.Data.Models.Team", "Team")
                        .WithMany("TicketAssignments")
                        .HasForeignKey("TeamId")
                        .IsRequired()
                        .HasConstraintName("FK_TicketAssignment_Team");

                    b.HasOne("ASI.Basecode.Data.Models.Ticket", "Ticket")
                        .WithMany("TicketAssignments")
                        .HasForeignKey("TicketId")
                        .IsRequired()
                        .HasConstraintName("FK_TicketAssignment_Ticket");

                    b.Navigation("Admin");

                    b.Navigation("Team");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.User", b =>
                {
                    b.HasOne("ASI.Basecode.Data.Models.Admin", "CreatedByNavigation")
                        .WithMany("UserCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_User_Admin_CreatedBy");

                    b.HasOne("ASI.Basecode.Data.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Role");

                    b.HasOne("ASI.Basecode.Data.Models.Admin", "UpdatedByNavigation")
                        .WithMany("UserUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_User_Admin_UpdatedBy");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Role");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.Admin", b =>
                {
                    b.Navigation("TicketAssignments");

                    b.Navigation("UserCreatedByNavigations");

                    b.Navigation("UserUpdatedByNavigations");
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.ArticleCategory", b =>
                {
                    b.Navigation("KnowledgeBaseArticles");
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.CategoryType", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.PerformanceReport", b =>
                {
                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.PriorityType", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.StatusType", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.Team", b =>
                {
                    b.Navigation("TeamMembers");

                    b.Navigation("TicketAssignments");
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.Ticket", b =>
                {
                    b.Navigation("ActivityLogs");

                    b.Navigation("Attachments");

                    b.Navigation("Feedbacks");

                    b.Navigation("Notifications");

                    b.Navigation("TicketAssignments");
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.User", b =>
                {
                    b.Navigation("ActivityLogs");

                    b.Navigation("Feedbacks");

                    b.Navigation("KnowledgeBaseArticles");

                    b.Navigation("TeamMembers");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
